package quizzes;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import com.mysql.jdbc.PreparedStatement;

import dbconnection.DBConnection;

/*
 * This class will store a series of questions of various types that 
 * can then 
 */
public class Quiz{

	private String title;
	private String description;
	private ArrayList<Question> unsaved_questions;
	private ArrayList<Question> questions;

	private int id;
	private String dateCreated;
	private boolean inDatabase;
	//TODO add the user info
	
	Quiz(){
		this.title = "";
		this.description = "";
		this.dateCreated = GetDate();
		this.id= -1;
		this.inDatabase = false;
		unsaved_questions = new ArrayList<Question>();
	}
	
	/*This constructor retrieves information from the database for the quizID
	 * provided and creates a new quiz object from that information
	 */
	Quiz(int id, DBConnection connection){
		ResultSet rs = connection.executeQuery("SELECT * FROM quizzes WHERE id="+id);
		try {
			rs.absolute(1);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		FillWithInfoFromRow(this, rs);
		this.inDatabase = true;
	}
	
	/**
	 * Gets all the quiz info from the row the result set is currently pointing to 
	 * sets @quiz information information to the information in that row.
	 * @param quiz, rs, row
	 * @param row
	 */
	private static void FillWithInfoFromRow(Quiz quiz, ResultSet rs){
		try {
			quiz.setTitle(rs.getString("title"));
			quiz.setDescription(rs.getString("description"));
			quiz.setDateCreated(rs.getString("dateCreated"));
			quiz.setID(rs.getInt("id"));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Sets this object's id to @id
	 * @param id
	 */
	private void setID(int id){
		this.id = id;
	}
	
	/**
	 * Sets the dateCreated of this quiz object to @date
	 * @param date
	 */
	private void setDateCreated(String date){
		this.dateCreated = date;
	}
	
	/**
	 * Returns the current date in the form "yyyy-MM-dd HH:mm:ss"
	 * @return
	 */
	private String GetDate(){
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date currentTime = Calendar.getInstance().getTime();		
		return dateFormat.format(currentTime);
	}
	
	/**
	 * Stores the initial quiz in the database and returns the autogenerated ID
	 * @param connection
	 * @return
	 */
	private int initializeQuizToDatabase(DBConnection connection){
		ResultSet rs = connection.executeQuery("INSERT INTO quizzes(title, dateCreated) values(\""+this.title+"\" , \""+this.dateCreated+"\")");
		int id = 0;
		try {
			//Get the autogenerated quiz id
			rs.next();
			id = rs.getInt(1);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		return id;
	}
	
	/**
	 * Retrieves a quiz with id=id from the database by unserializing
	 * the object from the database. 
	 * @param id
	 * @return
	 */
	public static Quiz retrieveQuizFromDatabase(int id){
		return null;
	}
	
	/**
	 * Sets the description of this quiz
	 * @param description
	 */
	public void setDescription(String description){
		this.description = description;
	}
	
	/**
	 * Returns the description associated with this quiz
	 * @return String description
	 */
	public String getDescription(){
		return description;
	}
	
	/**
	 * Adds a question to the list of questions 
	 * @param QuestionOld question
	 */
	public void addQuestion(Question question){
		unsaved_questions.add(question);
	}
	
	/**
	 * Returns the title of this quiz object
	 * @return
	 */
	public String getTitle(){
		return this.title;
	}
	
	/**
	 * sets the title of this quiz object
	 * @param
	 */
	public void setTitle(String title){
		this.title = title;
	}
	
	/**
	 * Returns the id of this quiz object
	 * @return 
	 */
	public int getID(){
		return this.id;
	}
	
	/**
	 * Stores this quizzes information in the database
	 * @param connection
	 */
	public void updateQuizInDB( DBConnection connection){
		//TODO update the creator as well
		if(!this.inDatabase){
			this.id = this.initializeQuizToDatabase(connection);
			this.inDatabase = true;
		}
		connection.executeQuery("UPDATE quizzes SET title='"+this.title+"', description='"+this.description+"' WHERE id=" + this.id);
		saveQuestionsToDatabase(connection, this.id);
	}
	
	/**
	 * finds all the questions associated with the quiz in the database,
	 * makes Question objects out of them, and adds them to the quizzes 
	 * array of questions so they can be printed
	 */
	public ArrayList<Question> loadQuestionsFromDB(DBConnection connection){
		ArrayList<Question> questions = new ArrayList<Question>();
		
		//Multiple Choice Questions
		ResultSet rs = connection.executeQuery("SELECT * FROM multiple_choice WHERE quizID="+this.id);
		AddQuestions(rs, questions, Question.MULTIPLE_CHOICE);
		
		//Fill in the blank questions
		rs = connection.executeQuery("SELECT * FROM fill_in_the_blank WHERE quizID="+this.id);
		AddQuestions(rs, questions, Question.FILL_IN_THE_BLANK);
		
		//Add the question response questions
		rs = connection.executeQuery("SELECT * FROM question_response WHERE quizID="+this.id);
		AddQuestions(rs, questions, Question.QUESTION_RESPONSE);
		
		//Add the picture-response questions
		rs = connection.executeQuery("SELECT * FROM picture_response WHERE quizID="+this.id);
		AddQuestions(rs, questions, Question.PICTURE_RESPONSE);
		
		this.questions = questions;
		return questions;
	}
	
	private void AddQuestions(ResultSet rs, ArrayList<Question> questions,
			int type) {
		Question question  = null;
		try {
			while(rs.next()){
				switch(type){
				case Question.MULTIPLE_CHOICE:
					question = new MultipleChoice(rs, questions.size() + 1);
					break;
				case Question.FILL_IN_THE_BLANK:
					question = new FillInTheBlank(rs, questions.size() + 1);
					break;
				case Question.PICTURE_RESPONSE:
					question = new PictureResponse(rs, questions.size() + 1);
					break;
				case Question.QUESTION_RESPONSE:
					question = new QuestionResponse(rs, questions.size() + 1);
					break;
				}
				questions.add(question);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * A static method that returns an array of quizzes using the information
	 * from the database according to the query provided
	 * @param query, connection
	 * @return
	 */
	public static ArrayList<Quiz> GetArrayOfQuizzes(String query, DBConnection connection){
		ResultSet rs = connection.executeQuery(query);
		ArrayList<Quiz> quizzes = new ArrayList<Quiz>();
		try {
			while(rs.next()){
				Quiz quiz = new Quiz();
				FillWithInfoFromRow(quiz, rs);
				System.out.println("After filling with Info: quizID=" + quiz.getID() + " quizTitle= "+ quiz.getTitle()  +  " datecreated = "+ quiz.dateCreated);
				quizzes.add(quiz);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return quizzes;
	}
	
	
	private void saveQuestionsToDatabase(DBConnection connection, int quizID){
		for(Question question: this.unsaved_questions){
			question.setQuizID(quizID);
			question.saveToDatabase(connection);
		}
	}
		
}
